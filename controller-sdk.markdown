---
layout: default
title: Controller SDK
nav_order: 3
description: TypeScript SDK for DEGN device control and blockchain operations
---

# DEGN Controller SDK

The DEGN Controller SDK is a comprehensive TypeScript library that provides developers with powerful tools to interact with DEGN devices. It offers functionality for device screen control, key event handling, and cryptographic operations.

## Installation

Install the SDK using your preferred package manager:

```bash
npm install @airmoney-degn/controller-sdk
# or
yarn add @airmoney-degn/controller-sdk
# or
pnpm add @airmoney-degn/controller-sdk
```

## Prerequisites

The SDK automatically detects your application identifier by fetching `/metadata.json` from your project root. This file is automatically generated when you create a new project using the `airmoney-cli` tool.

### Primary Configuration (Recommended)

Ensure your project has a `metadata.json` file in the root directory. The SDK will fetch this file via `GET /metadata.json`:

- **Development**: File should be in your project root directory
- **Production**: File should be in the root of your built/distribution folder

> **Note:** For detailed metadata.json configuration, see the [DEGN CLI](airmoney-cli.html#create-command) documentation.

The SDK will use the `name` field from this file to identify your application when making requests to the DEGN device.

### Fallback Configuration

If the `/metadata.json` file is not available (e.g., in development environments), you can set the app identifier directly on the window object:

```typescript
window.AIRMONEY_APP_ID = 'your-app-name'; // Must match the name field in metadata.json
```

### How it Works

The SDK follows this priority order:
1. **Primary**: Attempts to fetch `/metadata.json` and uses the `name` field as the app identifier
2. **Fallback**: If metadata.json is unavailable, uses `window.AIRMONEY_APP_ID`
3. **Error**: If neither is available, throws an error

## Core Services

### AirMoneyService

The main service for controlling device screens and managing visual content.

#### Basic Setup

```typescript
import { AirMoneyService } from '@airmoney-degn/controller-sdk';

// Initialize with default configuration
const airMoneyService = new AirMoneyService();

// Initialize with custom throttling configuration
const airMoneyService = new AirMoneyService({
  setImage: {
    throttleEnabled: true,
    throttleTime: 100 // milliseconds
  },
  setAnimate: {
    throttleEnabled: true,
    throttleTime: 200 // milliseconds
  }
});
```

#### Display Images

Display static images on device screens. The `imageName` parameter should be the path to the image relative to the `/assets` directory:

```typescript
import { AMServiceScreen } from '@airmoney-degn/controller-sdk';

// Display an image on the left screen
await airMoneyService.setImage({
  id: AMServiceScreen.Left,
  imageName: 'images/welcome-screen.png' // Path relative to /assets
});

// Display an image on the right screen
await airMoneyService.setImage({
  id: AMServiceScreen.Right,
  imageName: 'icons/status-icon.png' // Path relative to /assets
});
```

#### Display Animations

Display animated GIFs on device screens. The `imageName` parameter should be the path to the animation relative to the `/assets` directory:

```typescript
// Display a loading animation
await airMoneyService.setAnimate({
  id: AMServiceScreen.Left,
  imageName: 'animations/loading-spinner.gif' // Path relative to /assets
});

// Display a success animation
await airMoneyService.setAnimate({
  id: AMServiceScreen.Right,
  imageName: 'animations/success-checkmark.gif' // Path relative to /assets
});
```

### AirMoneyCryptoService

Comprehensive cryptographic operations for multiple blockchain networks.

#### EVM (Ethereum Virtual Machine) Operations

```typescript
import { AirMoneyCryptoService, isAMServiceSuccessResponse } from '@airmoney-degn/controller-sdk';

const cryptoService = new AirMoneyCryptoService();

// Get default EVM wallet
const walletResponse = await cryptoService.getDefaultEvmWallet();
if (isAMServiceSuccessResponse(walletResponse)) {
  console.log('Default wallet address:', walletResponse.result.address);
}

// Sign a message
const messageResponse = await cryptoService.signEvmMessage({
  address: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
  message: 'Hello, World!'
});

// Sign a transaction
const transactionResponse = await cryptoService.signEvmTransaction({
  address: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
  transaction: {
    to: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
    value: '0xde0b6b3a7640000', // 1 ETH in wei
    gasLimit: '0x5208',
    gasPrice: '0x3b9aca00'
  },
  chainId: '0x1' // Ethereum mainnet
});

// Sign EIP-712 typed data
const typedDataResponse = await cryptoService.signEip712TypedData({
  address: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
  typedData: {
    domain: { name: 'MyApp', version: '1' },
    types: { 
      Person: [{ name: 'name', type: 'string' }] 
    },
    primaryType: 'Person',
    message: { name: 'Alice' }
  }
});

// Verify EIP-1271 signature
const verifyResponse = await cryptoService.verifyEip1271Signature({
  rpcUrl: 'https://mainnet.infura.io/v3/YOUR_PROJECT_ID',
  contractAddress: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
  message: 'Hello, World!',
  signature: '0x...'
});
```

#### Solana Operations

```typescript
// Get default Solana wallet
const walletResponse = await cryptoService.getDefaultSvmWallet();
if (isAMServiceSuccessResponse(walletResponse)) {
  console.log('Default wallet address:', walletResponse.result.address);
}

// Sign a Solana message
const messageResponse = await cryptoService.signSolanaMessage({
  address: '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM',
  message: 'Hello, Solana!'
});

// Sign a Solana transaction
const transactionResponse = await cryptoService.signSolanaTransaction({
  address: '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM',
  transaction_base64: 'base64-encoded-transaction'
});
```

#### Bitcoin Operations

```typescript
// Get default Bitcoin wallet
const walletResponse = await cryptoService.getDefaultBitcoinWallet();
if (isAMServiceSuccessResponse(walletResponse)) {
  console.log('Default wallet address:', walletResponse.result.address);
}

// Sign a Bitcoin message
const messageResponse = await cryptoService.signBitcoinMessage({
  address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
  message: 'Hello, Bitcoin!'
});

// Verify a Bitcoin signature
const verifyResponse = await cryptoService.verifyBitcoinSignature({
  address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
  message: 'Hello, Bitcoin!',
  signature: 'signature-string'
});

// Sign a Bitcoin transaction
const transactionResponse = await cryptoService.signBitcoinTransaction({
  address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
  psbt_base64: 'base64-encoded-psbt',
  sighash_type: 'SIGHASH_ALL'
});
```

### AirMoneyKeyEvent & AirMoneyKeyEventManager

Advanced key event handling with support for combinations, double clicks, and priority-based triggers.

#### Basic Key Event Setup

```typescript
import { AirMoneyKeyEvent, AirMoneyKeyEventManager, AMKey } from '@airmoney-degn/controller-sdk';

// Create key event instance
const keyEvent = new AirMoneyKeyEvent({
  threshold: 300, // milliseconds for long press detection
  combinations: {
    'select-both': [AMKey.LeftButton, AMKey.RightButton],
    'rotate-select': [AMKey.ClockwiseRotary, AMKey.RotaryButton]
  },
  doubleClicks: {
    'double-press': AMKey.RotaryButton,
    'double-left': AMKey.LeftButton
  },
  debug: true // Enable debug logging
});

// Create manager
const manager = new AirMoneyKeyEventManager({ 
  instance: keyEvent,
  debug: true 
});
```

#### Advanced Event Handling

```typescript
// Subscribe to key events with priority-based triggers
const listenerId = manager.subscribe({
  name: 'NavigationGroup',
  priority: 10, // Higher priority = executed first
  triggers: [
    {
      condition: (event) => event.subType === 'press' && event.data.key === AMKey.LeftButton,
      trigger: (event) => {
        console.log('Left button pressed - navigate back');
        // Handle navigation logic
      }
    },
    {
      condition: (event) => event.subType === 'press' && event.data.key === AMKey.RightButton,
      trigger: (event) => {
        console.log('Right button pressed - navigate forward');
        // Handle navigation logic
      }
    },
    {
      condition: (event) => event.subType === 'combinationdown' && event.data.name === 'select-both',
      trigger: (event) => {
        console.log('Both buttons pressed - show menu');
        // Handle menu display
      }
    },
    {
      condition: (event) => event.subType === 'doubleclick' && event.data.name === 'double-press',
      trigger: (event) => {
        console.log('Double press - confirm action');
        // Handle confirmation
      }
    }
  ]
});

// Clean up when done
manager.unsubscribe(listenerId);
```



## Utility Functions

### Navigation Utilities

```typescript
import { 
  backToHome, 
  goToApp, 
  getAppLink, 
  displayAsset, 
  getAppLogo 
} from '@airmoney-degn/controller-sdk';

// Navigate back to home screen
backToHome();

// Navigate to specific app
goToApp('my-custom-app');

// Get app URL
const appUrl = getAppLink('my-app'); // Returns: http://my-app.internal

// Get asset URL
const assetUrl = displayAsset('my-app', 'images/logo.png');
// Returns: http://my-app.internal/images/logo.png

// Get app logo URL
const logoUrl = getAppLogo('my-app');
// Returns: http://my-app.internal/dapp-logo.png
```

### Validation Utilities

```typescript
import { isValidNumber, toBoolean } from '@airmoney-degn/controller-sdk';

// Validate number strings
const isValid = isValidNumber('123.45'); // true
const isInvalid = isValidNumber('abc'); // false

// Convert string to boolean
const boolValue = toBoolean('true'); // true
const falseValue = toBoolean('false'); // false
const numberValue = toBoolean('1'); // true
```

### Transaction Utilities

```typescript
import { 
  normalizeEVMTransaction, 
  toHexString 
} from '@airmoney-degn/controller-sdk';

// Convert values to hex strings
const hexValue = toHexString(123); // '0x7b'
const hexBigInt = toHexString(BigInt('1000000000000000000')); // '0xde0b6b3a7640000'

// Normalize EVM transaction
const normalizedTx = normalizeEVMTransaction({
  to: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
  value: '1000000000000000000', // Will be converted to '0xde0b6b3a7640000'
  gasLimit: 21000, // Will be converted to '0x5208'
  gasPrice: '1000000000' // Will be converted to '0x3b9aca00'
});
```

## Error Handling

The SDK provides robust error handling with type guards:

```typescript
import { 
  isAMServiceSuccessResponse,
  isAMServiceErrorResponse 
} from '@airmoney-degn/controller-sdk';

try {
  const response = await cryptoService.signEvmMessage({
    address: '0x...',
    message: 'Hello'
  });

  if (isAMServiceSuccessResponse(response)) {
    console.log('Signature:', response.result.signature);
  } else {
    console.error('Error:', response.error.message);
  }
} catch (error) {
  console.error('Service error:', error);
}
```

## API Reference

### AirMoneyService Methods

| Method | Description | Parameters |
|--------|-------------|------------|
| `setImage(params)` | Display static image | `{ id: AMServiceScreen.Left \| AMServiceScreen.Right, imageName: string }` (path relative to /assets) |
| `setAnimate(params)` | Display animated GIF | `{ id: AMServiceScreen.Left \| AMServiceScreen.Right, imageName: string }` (path relative to /assets) |

### AirMoneyCryptoService Methods

| Method | Description | Parameters |
|--------|-------------|------------|
| `getDefaultEvmWallet()` | Get default EVM wallet address | None |
| `signEvmMessage(params)` | Sign EVM message | `{ address: string, message: string }` |
| `signEvmTransaction(params)` | Sign EVM transaction | `{ address: string, transaction: object, chainId: string }` |
| `signEip712TypedData(params)` | Sign EIP-712 typed data | `{ address: string, typedData: object }` |
| `verifyEip1271Signature(params)` | Verify EIP-1271 signature | `{ rpcUrl: string, contractAddress: string, message: string, signature: string }` |
| `getDefaultSvmWallet()` | Get default Solana wallet address | None |
| `signSolanaMessage(params)` | Sign Solana message | `{ address: string, message: string }` |
| `signSolanaTransaction(params)` | Sign Solana transaction | `{ address: string, transaction_base64: string }` |
| `getDefaultBitcoinWallet()` | Get default Bitcoin wallet address | None |
| `signBitcoinMessage(params)` | Sign Bitcoin message | `{ address: string, message: string }` |
| `verifyBitcoinSignature(params)` | Verify Bitcoin signature | `{ address: string, message: string, signature: string }` |
| `signBitcoinTransaction(params)` | Sign Bitcoin transaction | `{ address: string, psbt_base64: string, sighash_type: string }` |

### AirMoneyKeyEventManager Methods

| Method | Description | Parameters |
|--------|-------------|------------|
| `subscribe(config)` | Subscribe to key events | `AMKeyEventTriggerGroupConfig` |
| `unsubscribe(id)` | Unsubscribe from events | `string` |
| `unsubscribeAll()` | Unsubscribe from all events | None |
| `destroy()` | Clean up manager | None |